/* automatically generated by rust-bindgen 0.66.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const AA_DEBUG: u32 = 0;
pub const AA_HEADER_VERSION: u32 = 1350;
pub const AA_PORT_NOT_FREE: u32 = 32768;
pub const AA_FEATURE_SPI: u32 = 1;
pub const AA_FEATURE_I2C: u32 = 2;
pub const AA_FEATURE_GPIO: u32 = 8;
pub const AA_FEATURE_I2C_MONITOR: u32 = 16;
pub const AA_LOG_STDOUT: u32 = 1;
pub const AA_LOG_STDERR: u32 = 2;
pub const AA_CONFIG_SPI_MASK: u32 = 1;
pub const AA_CONFIG_I2C_MASK: u32 = 2;
pub const AA_TARGET_POWER_NONE: u32 = 0;
pub const AA_TARGET_POWER_BOTH: u32 = 3;
pub const AA_TARGET_POWER_QUERY: u32 = 128;
pub const AA_ASYNC_NO_DATA: u32 = 0;
pub const AA_ASYNC_I2C_READ: u32 = 1;
pub const AA_ASYNC_I2C_WRITE: u32 = 2;
pub const AA_ASYNC_SPI: u32 = 4;
pub const AA_ASYNC_I2C_MONITOR: u32 = 8;
pub const AA_I2C_MONITOR_DATA: u32 = 255;
pub const AA_I2C_MONITOR_NACK: u32 = 256;
pub const AA_I2C_MONITOR_CMD_START: u32 = 65280;
pub const AA_I2C_MONITOR_CMD_STOP: u32 = 65281;
pub const AA_I2C_PULLUP_NONE: u32 = 0;
pub const AA_I2C_PULLUP_BOTH: u32 = 3;
pub const AA_I2C_PULLUP_QUERY: u32 = 128;
pub const AA_GPIO_DIR_INPUT: u32 = 0;
pub const AA_GPIO_DIR_OUTPUT: u32 = 1;
pub const AA_GPIO_PULLUP_OFF: u32 = 0;
pub const AA_GPIO_PULLUP_ON: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u08 = u8;
pub type u16_ = u16;
pub type u32_ = u32;
pub type u64_ = u64;
pub type s08 = i8;
pub type s16 = i16;
pub type s32 = i32;
pub type s64 = i64;
pub type f32_ = f32;
pub type f64_ = f64;
pub const AardvarkStatus_AA_OK: AardvarkStatus = 0;
pub const AardvarkStatus_AA_UNABLE_TO_LOAD_LIBRARY: AardvarkStatus = -1;
pub const AardvarkStatus_AA_UNABLE_TO_LOAD_DRIVER: AardvarkStatus = -2;
pub const AardvarkStatus_AA_UNABLE_TO_LOAD_FUNCTION: AardvarkStatus = -3;
pub const AardvarkStatus_AA_INCOMPATIBLE_LIBRARY: AardvarkStatus = -4;
pub const AardvarkStatus_AA_INCOMPATIBLE_DEVICE: AardvarkStatus = -5;
pub const AardvarkStatus_AA_COMMUNICATION_ERROR: AardvarkStatus = -6;
pub const AardvarkStatus_AA_UNABLE_TO_OPEN: AardvarkStatus = -7;
pub const AardvarkStatus_AA_UNABLE_TO_CLOSE: AardvarkStatus = -8;
pub const AardvarkStatus_AA_INVALID_HANDLE: AardvarkStatus = -9;
pub const AardvarkStatus_AA_CONFIG_ERROR: AardvarkStatus = -10;
pub const AardvarkStatus_AA_I2C_NOT_AVAILABLE: AardvarkStatus = -100;
pub const AardvarkStatus_AA_I2C_NOT_ENABLED: AardvarkStatus = -101;
pub const AardvarkStatus_AA_I2C_READ_ERROR: AardvarkStatus = -102;
pub const AardvarkStatus_AA_I2C_WRITE_ERROR: AardvarkStatus = -103;
pub const AardvarkStatus_AA_I2C_SLAVE_BAD_CONFIG: AardvarkStatus = -104;
pub const AardvarkStatus_AA_I2C_SLAVE_READ_ERROR: AardvarkStatus = -105;
pub const AardvarkStatus_AA_I2C_SLAVE_TIMEOUT: AardvarkStatus = -106;
pub const AardvarkStatus_AA_I2C_DROPPED_EXCESS_BYTES: AardvarkStatus = -107;
pub const AardvarkStatus_AA_I2C_BUS_ALREADY_FREE: AardvarkStatus = -108;
pub const AardvarkStatus_AA_SPI_NOT_AVAILABLE: AardvarkStatus = -200;
pub const AardvarkStatus_AA_SPI_NOT_ENABLED: AardvarkStatus = -201;
pub const AardvarkStatus_AA_SPI_WRITE_ERROR: AardvarkStatus = -202;
pub const AardvarkStatus_AA_SPI_SLAVE_READ_ERROR: AardvarkStatus = -203;
pub const AardvarkStatus_AA_SPI_SLAVE_TIMEOUT: AardvarkStatus = -204;
pub const AardvarkStatus_AA_SPI_DROPPED_EXCESS_BYTES: AardvarkStatus = -205;
pub const AardvarkStatus_AA_GPIO_NOT_AVAILABLE: AardvarkStatus = -400;
pub const AardvarkStatus_AA_I2C_MONITOR_NOT_AVAILABLE: AardvarkStatus = -500;
pub const AardvarkStatus_AA_I2C_MONITOR_NOT_ENABLED: AardvarkStatus = -501;
pub type AardvarkStatus = ::std::os::raw::c_int;
pub type Aardvark = ::std::os::raw::c_int;
pub type aa_u08 = u08;
pub type aa_u16 = u16_;
pub type aa_u32 = u32_;
pub type aa_s08 = s08;
pub type aa_s16 = s16;
pub type aa_s32 = s32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AardvarkVersion {
    pub software: u16_,
    pub firmware: u16_,
    pub hardware: u16_,
    pub sw_req_by_fw: u16_,
    pub fw_req_by_sw: u16_,
    pub api_req_by_sw: u16_,
}
#[test]
fn bindgen_test_layout_AardvarkVersion() {
    const UNINIT: ::std::mem::MaybeUninit<AardvarkVersion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AardvarkVersion>(),
        12usize,
        concat!("Size of: ", stringify!(AardvarkVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<AardvarkVersion>(),
        2usize,
        concat!("Alignment of ", stringify!(AardvarkVersion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).software) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AardvarkVersion),
            "::",
            stringify!(software)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firmware) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(AardvarkVersion),
            "::",
            stringify!(firmware)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AardvarkVersion),
            "::",
            stringify!(hardware)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sw_req_by_fw) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(AardvarkVersion),
            "::",
            stringify!(sw_req_by_fw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fw_req_by_sw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AardvarkVersion),
            "::",
            stringify!(fw_req_by_sw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_req_by_sw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(AardvarkVersion),
            "::",
            stringify!(api_req_by_sw)
        )
    );
}
extern "C" {
    pub fn aa_find_devices(
        num_devices: ::std::os::raw::c_int,
        devices: *mut u16_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_find_devices_ext(
        num_devices: ::std::os::raw::c_int,
        devices: *mut u16_,
        num_ids: ::std::os::raw::c_int,
        unique_ids: *mut u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_open(port_number: ::std::os::raw::c_int) -> Aardvark;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AardvarkExt {
    pub version: AardvarkVersion,
    pub features: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AardvarkExt() {
    const UNINIT: ::std::mem::MaybeUninit<AardvarkExt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AardvarkExt>(),
        16usize,
        concat!("Size of: ", stringify!(AardvarkExt))
    );
    assert_eq!(
        ::std::mem::align_of::<AardvarkExt>(),
        4usize,
        concat!("Alignment of ", stringify!(AardvarkExt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AardvarkExt),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AardvarkExt),
            "::",
            stringify!(features)
        )
    );
}
extern "C" {
    pub fn aa_open_ext(port_number: ::std::os::raw::c_int, aa_ext: *mut AardvarkExt) -> Aardvark;
}
extern "C" {
    pub fn aa_close(aardvark: Aardvark) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_port(aardvark: Aardvark) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_features(aardvark: Aardvark) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_unique_id(aardvark: Aardvark) -> u32_;
}
extern "C" {
    pub fn aa_status_string(status: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn aa_log(
        aardvark: Aardvark,
        level: ::std::os::raw::c_int,
        handle: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_version(aardvark: Aardvark, version: *mut AardvarkVersion) -> ::std::os::raw::c_int;
}
pub const AardvarkConfig_AA_CONFIG_GPIO_ONLY: AardvarkConfig = 0;
pub const AardvarkConfig_AA_CONFIG_SPI_GPIO: AardvarkConfig = 1;
pub const AardvarkConfig_AA_CONFIG_GPIO_I2C: AardvarkConfig = 2;
pub const AardvarkConfig_AA_CONFIG_SPI_I2C: AardvarkConfig = 3;
pub const AardvarkConfig_AA_CONFIG_QUERY: AardvarkConfig = 128;
pub type AardvarkConfig = ::std::os::raw::c_uint;
extern "C" {
    pub fn aa_configure(aardvark: Aardvark, config: AardvarkConfig) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_target_power(aardvark: Aardvark, power_mask: u08) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_sleep_ms(milliseconds: u32_) -> u32_;
}
extern "C" {
    pub fn aa_async_poll(
        aardvark: Aardvark,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_free_bus(aardvark: Aardvark) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_bitrate(
        aardvark: Aardvark,
        bitrate_khz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_bus_timeout(aardvark: Aardvark, timeout_ms: u16_) -> ::std::os::raw::c_int;
}
pub const AardvarkI2cFlags_AA_I2C_NO_FLAGS: AardvarkI2cFlags = 0;
pub const AardvarkI2cFlags_AA_I2C_10_BIT_ADDR: AardvarkI2cFlags = 1;
pub const AardvarkI2cFlags_AA_I2C_COMBINED_FMT: AardvarkI2cFlags = 2;
pub const AardvarkI2cFlags_AA_I2C_NO_STOP: AardvarkI2cFlags = 4;
pub const AardvarkI2cFlags_AA_I2C_SIZED_READ: AardvarkI2cFlags = 16;
pub const AardvarkI2cFlags_AA_I2C_SIZED_READ_EXTRA1: AardvarkI2cFlags = 32;
pub type AardvarkI2cFlags = ::std::os::raw::c_uint;
extern "C" {
    pub fn aa_i2c_read(
        aardvark: Aardvark,
        slave_addr: u16_,
        flags: AardvarkI2cFlags,
        num_bytes: u16_,
        data_in: *mut u08,
    ) -> ::std::os::raw::c_int;
}
pub const AardvarkI2cStatus_AA_I2C_STATUS_OK: AardvarkI2cStatus = 0;
pub const AardvarkI2cStatus_AA_I2C_STATUS_BUS_ERROR: AardvarkI2cStatus = 1;
pub const AardvarkI2cStatus_AA_I2C_STATUS_SLA_ACK: AardvarkI2cStatus = 2;
pub const AardvarkI2cStatus_AA_I2C_STATUS_SLA_NACK: AardvarkI2cStatus = 3;
pub const AardvarkI2cStatus_AA_I2C_STATUS_DATA_NACK: AardvarkI2cStatus = 4;
pub const AardvarkI2cStatus_AA_I2C_STATUS_ARB_LOST: AardvarkI2cStatus = 5;
pub const AardvarkI2cStatus_AA_I2C_STATUS_BUS_LOCKED: AardvarkI2cStatus = 6;
pub const AardvarkI2cStatus_AA_I2C_STATUS_LAST_DATA_ACK: AardvarkI2cStatus = 7;
pub type AardvarkI2cStatus = ::std::os::raw::c_uint;
extern "C" {
    pub fn aa_i2c_read_ext(
        aardvark: Aardvark,
        slave_addr: u16_,
        flags: AardvarkI2cFlags,
        num_bytes: u16_,
        data_in: *mut u08,
        num_read: *mut u16_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_write(
        aardvark: Aardvark,
        slave_addr: u16_,
        flags: AardvarkI2cFlags,
        num_bytes: u16_,
        data_out: *const u08,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_write_ext(
        aardvark: Aardvark,
        slave_addr: u16_,
        flags: AardvarkI2cFlags,
        num_bytes: u16_,
        data_out: *const u08,
        num_written: *mut u16_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_write_read(
        aardvark: Aardvark,
        slave_addr: u16_,
        flags: AardvarkI2cFlags,
        out_num_bytes: u16_,
        out_data: *const u08,
        num_written: *mut u16_,
        in_num_bytes: u16_,
        in_data: *mut u08,
        num_read: *mut u16_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_slave_enable(
        aardvark: Aardvark,
        addr: u08,
        maxTxBytes: u16_,
        maxRxBytes: u16_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_slave_disable(aardvark: Aardvark) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_slave_set_response(
        aardvark: Aardvark,
        num_bytes: u08,
        data_out: *const u08,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_slave_write_stats(aardvark: Aardvark) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_slave_read(
        aardvark: Aardvark,
        addr: *mut u08,
        num_bytes: u16_,
        data_in: *mut u08,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_slave_write_stats_ext(
        aardvark: Aardvark,
        num_written: *mut u16_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_slave_read_ext(
        aardvark: Aardvark,
        addr: *mut u08,
        num_bytes: u16_,
        data_in: *mut u08,
        num_read: *mut u16_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_monitor_enable(aardvark: Aardvark) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_monitor_disable(aardvark: Aardvark) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_monitor_read(
        aardvark: Aardvark,
        num_bytes: u16_,
        data: *mut u16_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_i2c_pullup(aardvark: Aardvark, pullup_mask: u08) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_spi_bitrate(
        aardvark: Aardvark,
        bitrate_khz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const AardvarkSpiPolarity_AA_SPI_POL_RISING_FALLING: AardvarkSpiPolarity = 0;
pub const AardvarkSpiPolarity_AA_SPI_POL_FALLING_RISING: AardvarkSpiPolarity = 1;
pub type AardvarkSpiPolarity = ::std::os::raw::c_uint;
pub const AardvarkSpiPhase_AA_SPI_PHASE_SAMPLE_SETUP: AardvarkSpiPhase = 0;
pub const AardvarkSpiPhase_AA_SPI_PHASE_SETUP_SAMPLE: AardvarkSpiPhase = 1;
pub type AardvarkSpiPhase = ::std::os::raw::c_uint;
pub const AardvarkSpiBitorder_AA_SPI_BITORDER_MSB: AardvarkSpiBitorder = 0;
pub const AardvarkSpiBitorder_AA_SPI_BITORDER_LSB: AardvarkSpiBitorder = 1;
pub type AardvarkSpiBitorder = ::std::os::raw::c_uint;
extern "C" {
    pub fn aa_spi_configure(
        aardvark: Aardvark,
        polarity: AardvarkSpiPolarity,
        phase: AardvarkSpiPhase,
        bitorder: AardvarkSpiBitorder,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_spi_write(
        aardvark: Aardvark,
        out_num_bytes: u16_,
        data_out: *const u08,
        in_num_bytes: u16_,
        data_in: *mut u08,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_spi_slave_enable(aardvark: Aardvark) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_spi_slave_disable(aardvark: Aardvark) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_spi_slave_set_response(
        aardvark: Aardvark,
        num_bytes: u08,
        data_out: *const u08,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_spi_slave_read(
        aardvark: Aardvark,
        num_bytes: u16_,
        data_in: *mut u08,
    ) -> ::std::os::raw::c_int;
}
pub const AardvarkSpiSSPolarity_AA_SPI_SS_ACTIVE_LOW: AardvarkSpiSSPolarity = 0;
pub const AardvarkSpiSSPolarity_AA_SPI_SS_ACTIVE_HIGH: AardvarkSpiSSPolarity = 1;
pub type AardvarkSpiSSPolarity = ::std::os::raw::c_uint;
extern "C" {
    pub fn aa_spi_master_ss_polarity(
        aardvark: Aardvark,
        polarity: AardvarkSpiSSPolarity,
    ) -> ::std::os::raw::c_int;
}
pub const AardvarkGpioBits_AA_GPIO_SCL: AardvarkGpioBits = 1;
pub const AardvarkGpioBits_AA_GPIO_SDA: AardvarkGpioBits = 2;
pub const AardvarkGpioBits_AA_GPIO_MISO: AardvarkGpioBits = 4;
pub const AardvarkGpioBits_AA_GPIO_SCK: AardvarkGpioBits = 8;
pub const AardvarkGpioBits_AA_GPIO_MOSI: AardvarkGpioBits = 16;
pub const AardvarkGpioBits_AA_GPIO_SS: AardvarkGpioBits = 32;
pub type AardvarkGpioBits = ::std::os::raw::c_uint;
extern "C" {
    pub fn aa_gpio_direction(aardvark: Aardvark, direction_mask: u08) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_gpio_pullup(aardvark: Aardvark, pullup_mask: u08) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_gpio_get(aardvark: Aardvark) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_gpio_set(aardvark: Aardvark, value: u08) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aa_gpio_change(aardvark: Aardvark, timeout: u16_) -> ::std::os::raw::c_int;
}
